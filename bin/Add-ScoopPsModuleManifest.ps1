[CmdletBinding(DefaultParameterSetName = 'FromBucketConfig')]
param(
    # Name of module to install
    [Parameter(Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, ParameterSetName = 'ByName', Position = 0 )]
    [string]
    $Name,

    # Version of module to install
    [Parameter(ValueFromPipelineByPropertyName, ParameterSetName = 'ByName', Position = 1 )]
    [version]
    $Version = $null,

    # Recreate manifest if it exists
    [switch]
    $Force,

    # Skip module if manifest already exists
    [switch]
    $SkipExisting,

    # Return moudule name
    [switch]
    $PassThru
)

begin {
    Function Get-PowershellGalleryUri($Type, $ModuleName, $Version) {
        'https://www.powershellgallery.com{0}{1}' -f
        $(
            switch -Regex ($Type) {
                'query|checkver|hash' { '/api/v2/Packages()' }
                'home' { "/packages/$ModuleName" }
                'download' { "/api/v2/Package/$ModuleName/`$version#/mod.nupkg" }
            }
        ),
        $(
            switch -Regex ($Type) {
                'home|download' { '' }
                'query' { "?`$filter=Id eq '$ModuleName' and $( if ($Version) {"Version eq '$Version'"} else {'IsLatestVersion eq true'})" }
                'checkver' { "?`$filter=Id eq '$ModuleName' and IsLatestVersion eq true" -replace ' ', '%20' }
                'hash' { "?`$filter=Id eq '$ModuleName' and Version eq '`$version'" }
            }
        )
    }

    $BucketDir = "$psscriptroot/../bucket"
    $null = Resolve-Path -Path $BucketDir -ErrorAction Stop

    $CheckVer = "$psscriptroot/checkver.ps1"
    $null = Resolve-Path -Path $CheckVer -ErrorAction Stop
}

process {
    if ($PsCmdlet.ParameterSetName -eq 'FromBucketConfig') {
        Write-Host 'here'
        Get-Content -Path "$psscriptroot/module_list.txt" |
        & "$psscriptroot/Add-ScoopPsModuleManifest.ps1" -SkipExisting -PassThru

        return
    }
    $ManifestPath = "$BucketDir/$Name.json"

    if ( ( Test-Path $ManifestPath ) -and $SkipExisting ) {
        if ($PassThru) { return $Name } else { return }
    }

    if ( ( Test-Path $ManifestPath ) -and -not $Force ) {
        throw "Manifest already exists for $Name at $ManifestPath"
    }

    $ModuleInfo = ( Invoke-RestMethod -Uri ( Get-PowershellGalleryUri 'query' $Name $Version ) ).properties
    if ( -not $ModuleInfo ) {
        throw "Powershell module $Name not found in Powershell gallery"
    }

    $ManifestPath = "$BucketDir/$($ModuleInfo.Id).json"

    $JsonHash = @{
        'version'     = 'To be generated by checkver'
        'url'         = 'to be generated by checkver'
        'hash'        = 'to be generated by checkver'
        'description' = $ModuleInfo.Description -replace '\r', '' -replace '\n', ' '
        'homepage'    = Get-PowershellGalleryUri 'home' $ModuleInfo.Id
        'license'     =
        if ($ModuleInfo.LicenseUrl.null) {
            'Unknown'
        }
        else {
            @{
                'identifier' = 'Refer to Webpage'
                'url'        = $ModuleInfo.LicenseUrl
            }
        }
        'checkver'    = @{
            'url'     = Get-PowershellGalleryUri 'checkver' $ModuleInfo.Id
            'regex'   = '(?i)<d:Version>(?<ver>[^<]+)<.d:Version>'
            'replace' = '${ver}'
        }
        'autoupdate'  = @{
            'url'  = Get-PowershellGalleryUri 'download' $ModuleInfo.Id
            'hash' = @{
                'url'   = Get-PowershellGalleryUri 'hash' $ModuleInfo.Id
                'regex' = '<d:PackageHash>$base64<.d:PackageHash>'
            }
        }
        'psmodule'    = @{
            'name' = $ModuleInfo.Id
        }
    }

    $Dependencies =
    $ModuleInfo.Dependencies -split ':[^:]+:\|*' |
    Where-Object { $_ } |
    & "$psscriptroot\Add-ScoopPsModuleManifest.ps1"  -Name $_ -PassThru -SkipExisting

    if ($Dependencies) {
        $JsonHash.depends = $Dependencies
    }

    $null =
    $JsonHash |
    ConvertTo-Json -Depth 5 |
    Set-Content -Path $ManifestPath -Encoding ascii -NoNewline

    $null = & $CheckVer -App $ModuleInfo.Id -Update

    if ($PassThru) { $ModuleInfo.Id }
}

end {}
